BOUNDARY console.log
BOUNDARY console.log(
  "this is an inlined variable + the 32nd fibonacci number",
  unlabeledVariable + comptimeFibonacci(32),
)
BOUNDARY console.log(
  "this is an inlined variable + the 32nd fibonacci number",
  unlabeledVariable + comptimeFibonacci(32),
)
BOUNDARY console.log
BOUNDARY console.log("README.md", comptimeReadFileSync("README.md", "utf8"))
BOUNDARY console.log("README.md", comptimeReadFileSync("README.md", "utf8"))
BOUNDARY $comptime: const { readFileSync: comptimeReadFileSync, access } = await import("fs")

$comptime: function comptimeFibonacci(n) {
  let a = 0
  let b = 1
  for (let i = 0; i < n; i++) {
    const newA = b
    b = a + b
    a = newA
  }
  return a
}

$comptime: const unlabeledVariable = 48484848
$comptime: const a = 48484848, b = 3
$comptime: let x
$comptime: const [y, z] = [4, 3]

console.log(
  "this is an inlined variable + the 32nd fibonacci number",
  unlabeledVariable + comptimeFibonacci(32),
)
console.log("README.md", comptimeReadFileSync("README.md", "utf8"))

{"children":null,"def_order":[{"type":"declaration","index":0},{"type":"declaration","index":1},{"type":"declaration","index":2},{"type":"declaration","index":3},{"type":"declaration","index":4},{"type":"declaration","index":5},{"type":"region","index":1},{"type":"region","index":2},{"type":"region","index":2},{"type":"region","index":4},{"type":"region","index":5},{"type":"region","index":5},{"type":"region","index":11}],"arguments":null,"statements":[],"declarations":[{"identifiers":["comptimeReadFileSync","access"],"text":"const { readFileSync: comptimeReadFileSync, access } = await import(\"fs\")"},{"identifiers":["comptimeFibonacci"],"text":"function comptimeFibonacci(n) {\n  let a = 0\n  let b = 1\n  for (let i = 0; i \u003c n; i++) {\n    const newA = b\n    b = a + b\n    a = newA\n  }\n  return a\n}"},{"identifiers":["unlabeledVariable"],"text":"const unlabeledVariable = 48484848"},{"identifiers":["a","b"],"text":"const a = 48484848, b = 3"},{"identifiers":["x"],"text":"let x"},{"identifiers":["y","z"],"text":"const [y, z] = [4, 3]"}],"regions":["console",".","(\n  \"this is an inlined variable + the 32nd fibonacci number\",\n  unlabeledVariable + comptimeFibonacci(32),\n)","console",".","(\"README.md\", comptimeReadFileSync(\"README.md\", \"utf8\"))","$comptime: const { readFileSync: comptimeReadFileSync, access } = await import(\"fs\")","$comptime: function comptimeFibonacci(n) {\n  let a = 0\n  let b = 1\n  for (let i = 0; i \u003c n; i++) {\n    const newA = b\n    b = a + b\n    a = newA\n  }\n  return a\n}","$comptime: const unlabeledVariable = 48484848","$comptime: const a = 48484848, b = 3","$comptime: let x","$comptime: const [y, z] = [4, 3]"]}
