<program>
  <labeled_statement>
    label: <statement_identifier />
    <: />
    body: <lexical_declaration>
      kind: <const />
      <variable_declarator>
        name: <identifier />
        value: <= />
        <number />
      </variable_declarator>
    </lexical_declaration>
  </labeled_statement>
  <labeled_statement>
    label: <statement_identifier />
    <: />
    body: <function_declaration>
      <function />
      name: <identifier />
      parameters: <formal_parameters>
        <( />
        <identifier />
        <, />
        <identifier />
        <) />
      </formal_parameters>
      body: <statement_block>
        <{ />
        <return_statement>
          <return />
          <binary_expression>
            left: <identifier />
            operator: <** />
            right: <number />
          </binary_expression>
        </return_statement>
        <} />
      </statement_block>
    </function_declaration>
  </labeled_statement>
  <labeled_statement>
    label: <statement_identifier />
    <: />
    body: <lexical_declaration>
      kind: <const />
      <variable_declarator>
        name: <identifier />
        value: <= />
        <string>
          <" />
          <string_fragment />
          <" />
        </string>
      </variable_declarator>
    </lexical_declaration>
  </labeled_statement>
  <expression_statement>
    <identifier />
  </expression_statement>
  <expression_statement>
    <assignment_expression>
      left: <identifier />
      <= />
      right: <number />
    </assignment_expression>
  </expression_statement>
  <lexical_declaration>
    kind: <const />
    <variable_declarator>
      name: <identifier />
      value: <= />
      <array>
        <[ />
        <identifier />
        <, />
        <number />
        <] />
      </array>
    </variable_declarator>
  </lexical_declaration>
  <lexical_declaration>
    kind: <const />
    <variable_declarator>
      name: <identifier />
      value: <= />
      <object>
        <{ />
        <shorthand_property_identifier />
        <, />
        <pair>
          key: <computed_property_name>
            <[ />
            <identifier />
            <] />
          </computed_property_name>
          <: />
          value: <identifier />
        </pair>
        <} />
      </object>
    </variable_declarator>
  </lexical_declaration>
  <expression_statement>
    <call_expression>
      function: <identifier />
      arguments: <arguments>
        <( />
        <number />
        <, />
        <identifier />
        <) />
      </arguments>
    </call_expression>
  </expression_statement>
  <expression_statement>
    <binary_expression>
      left: <number />
      operator: <+ />
      right: <identifier />
    </binary_expression>
  </expression_statement>
  <expression_statement>
    <binary_expression>
      left: <identifier />
      operator: <in />
      right: <identifier />
    </binary_expression>
  </expression_statement>
  <expression_statement>
    <ternary_expression>
      condition: <binary_expression>
        left: <binary_expression>
          left: <identifier />
          operator: <% />
          right: <number />
        </binary_expression>
        operator: <=== />
        right: <number />
      </binary_expression>
      <? />
      consequence: <identifier />
      <: />
      alternative: <undefined />
    </ternary_expression>
  </expression_statement>
  <expression_statement>
    <sequence_expression>
      left: <identifier />
      <, />
      right: <call_expression>
        function: <number />
        arguments: <arguments>
          <( />
          <identifier />
          <, />
          <number />
          <) />
        </arguments>
      </call_expression>
    </sequence_expression>
  </expression_statement>
  <expression_statement>
    <call_expression>
      function: <call_expression>
        function: <template_string>
          <` />
          <template_substitution>
            <${ />
            <identifier />
            <} />
          </template_substitution>
          <template_substitution>
            <${ />
            <number />
            <} />
          </template_substitution>
          <` />
        </template_string>
        arguments: <arguments>
          <( />
          <arrow_function>
            parameters: <formal_parameters>
              <( />
              <) />
            </formal_parameters>
            <=> />
            body: <binary_expression>
              left: <identifier />
              operator: <* />
              right: <number />
            </binary_expression>
          </arrow_function>
          <) />
        </arguments>
      </call_expression>
      arguments: <arguments>
        <( />
        <) />
      </arguments>
    </call_expression>
  </expression_statement>
  <expression_statement>
    <member_expression>
      object: <identifier />
      <. />
      property: <property_identifier />
    </member_expression>
  </expression_statement>
  <expression_statement>
    <subscript_expression>
      object: <identifier />
      <[ />
      index: <identifier />
      <] />
    </subscript_expression>
  </expression_statement>
  <expression_statement>
    <update_expression>
      argument: <identifier />
      operator: <++ />
    </update_expression>
  </expression_statement>
  <expression_statement>
    <augmented_assignment_expression>
      left: <identifier />
      operator: <+= />
      right: <number />
    </augmented_assignment_expression>
  </expression_statement>
  <expression_statement>
    <unary_expression>
      operator: <delete />
      argument: <subscript_expression>
        object: <identifier />
        <[ />
        index: <identifier />
        <] />
      </subscript_expression>
    </unary_expression>
  </expression_statement>
</program>